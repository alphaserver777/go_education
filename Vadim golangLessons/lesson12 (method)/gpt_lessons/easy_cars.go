package main

import "fmt"

/*
Представьте себе коробку с игрушками.
Эта коробка — это структура (например, Car из предыдущих примеров).
Внутри коробки лежат игрушки: имя, марка машины, номер и т.д. — это поля структуры.

Теперь представьте, что вы можете делать с этой коробкой: открывать её, вынимать игрушки,
добавлять новые игрушки. Эти действия — это методы. Каждый метод работает с коробкой (структурой).

Например:

• OpenBox(): Метод, который "открывает" коробку (может, выводит информацию о машине на экран).
• AddToy(newToy string): Метод, который добавляет новую игрушку (добавляет информацию в поля структуры).
• RemoveToy(toy string): Метод, который удаляет игрушку (удаляет информацию из полей структуры).

В Go методы пишутся как обычные функции, но с добавлением в начале названия ресивера: это как бы указатель на саму коробку, с которой работает метод.
Ресивер пишется в круглых скобках перед именем метода, например: (c Car) OpenBox(), где c Car — это ресивер, указывающий, что метод работает с объектом типа Car.

Таким образом, методы позволяют вам описывать, что можно делать со структурой (с коробкой с игрушками). Они делают код более организованным и понятным.
*/

// Структура (коробка с игрушками)
type Car struct {
	Name    string
	Brand   string
	Plate   string
	Details string // Дополнительная информация
}

// Метод (действие с коробкой): выводит информацию о машине
func (c Car) Describe() {
	fmt.Println("Название:", c.Name)
	fmt.Println("Марка:", c.Brand)
	fmt.Println("Номер:", c.Plate)
	fmt.Println("Детали:", c.Details)
}

// Метод (действие с коробкой): добавляет детали
func (c *Car) AddDetails(details string) { // Используем указатель (c *Car) для изменения структуры (Добавления данных в myCar)
	c.Details = details
}

func main() {
	myCar := Car{Name: "Toyota Camry", Brand: "Toyota", Plate: "A123BC"}
	myCar.Describe() // Вызов метода Describe - описание машины

	fmt.Println("\nДобавим детали...")
	myCar.AddDetails("Отличное состояние, полный привод")
	myCar.Describe() // Вызов метода Describe после добавления деталей
}
